{ config, options, lib, pkgs ? import <nixpkgs> { }, ... }:

with lib;

let
  cfg = config.services.hodos;
  settingsFormat = pkgs.formats.toml { };
in
{
  options.services.hodos = {
    enable = mkEnableOption "Hodos - Dual ISP policy router";

    settings = mkOption {
      type = settingsFormat.type;
      example = literalExpression ''
        {
          icmp_interval = "2s";
          icmp_timeout = "250ms";
          burst_size = 3;
          burst_interval = "10s";
          up_action = "";
          down_action = "";

          interfaces = [
            {
              name = "ens33";
              table = 2;
              minimum_up = 1;
              metric = 3;

              hosts = [
                {
                  name = "Google";
                  host = "8.8.8.8";
                }
                {
                  name = "Cloudflare";
                  host = "1.1.1.1";
                }
                {
                  name = "Cloudflare";
                  host = "2606:4700:4700::1111";
                }
              ];
            }
            {
              name = "ens34";
              table = 3;
              metric = 2;
              minimum_up = 1;

              hosts = [
                {
                  name = "Cloudflare";
                  host = "1.0.0.1";
                }
              ];
            }
          ];
        }
      '';
      description = ''
        Configuration for Hodos.
      '';
    };

    configFile = mkOption {
      default = settingsFormat.generate "hodos.toml" cfg.settings;
      defaultText = "A Hodos configuration file automatically generated by values from services.hodos.*";
      type = types.path;
      example = literalExpression ''"''${pkgs.hodos}/hodos.toml"'';
      description = "Path to Hodos TOML configuration file.";
    };

    package = mkOption {
      default = pkgs.callPackage ./default.nix {};
      defaultText = literalExpression "pkgs.hodos";
      type = types.package;
      description = "Hodos package to use.";
    };
  };
  config = mkIf cfg.enable {
    systemd.services.hodos = {
      description = "Hodos";
      after = [ "network.target" "firewall.target" ];
      wantedBy = [ "multi-user.target" ];
      wants = [ "network.target" ];
      startLimitIntervalSec = 30;
      startLimitBurst = 5;
      serviceConfig = {
        Restart = "on-failure";
        RestartSec = "5s";
        DynamicUser = true;
        MemoryHigh = "128M";
        MemoryMax = "256M";
        NoNewPrivileges = true;
        LimitNPROC = 512;
        LimitNOFILE = 1048576;
        CapabilityBoundingSet = "CAP_NET_ADMIN CAP_NET_RAW";
        AmbientCapabilities = "CAP_NET_ADMIN CAP_NET_RAW";
        ExecStart = "${getBin cfg.package}/bin/hodos -c ${cfg.configFile}";
      };
    };
  };
  meta.maintainers = with maintainers; [ jsimonetti ];
}
